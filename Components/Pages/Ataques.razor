@page "/attacks"

@using static PokeApiService
@inject PokeApiService PokeApiService
@inject NavigationManager NavigationManager
@inject SharedMoveService SharedMoveService

<MudContainer>
    <MudSpacer />

    <!-- Autocomplete para movimientos -->
    <MudAutocomplete T="string"
                     Label="Buscar movimiento"
                     @bind-Value="pokemonMove"
                     SearchFunc="SearchMoves"
                     Placeholder="Escribe el nombre de un ataque"
                     Variant="Variant.Outlined"
                     Adornment="Adornment.End"
                     AdornmentIcon="@Icons.Material.Filled.Search"
                     AdornmentColor="Color.Secondary" />

    <MudText Typo="Typo.h4" Class="red Default white-text shades-text text-center mb-4 rounded-lg">Directorio de movimientos</MudText>

    <MudFab OnClick="SearchByButton" Color="Color.Primary" Class="mt-2 ml-2" Disabled="@Dissearch" StartIcon="@Icons.Material.Filled.Search">Buscar</MudFab>
    <MudFab OnClick="ClearFields" Color="Color.Primary" Class="@clase" Disabled="@Disclear" StartIcon="@iconchange">
        @if (_processing)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        }
        else
        {
            <MudText Class="mt-2 ml-2" Color="Color.Default">Limpiar</MudText>
        }
    </MudFab>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="@progressvisibilty" />

    @if (movelist != null)
    {
        <MudCard Class="mt-4" Style="background-color: #FFFFFF; border: 2px solid #FF0000; border-radius: 16px;">
            <MudCardContent>
                <MudText Align="Align.Center" Typo="Typo.h5" Color="Color.Primary">@movelist.Name.ToUpper()</MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" Color="Color.Primary">ID: @movelist.Id</MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" Color="Color.Primary">Power: @movelist.Power</MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" Color="Color.Primary">PowerPoints: @movelist.Pp</MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" Color="Color.Primary">Priority: @movelist.Priority</MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" Color="Color.Primary">Accuracy: @movelist.Accuracy</MudText>

                <MudChipSet Style="display: flex; justify-content: center;" T="string">
                    @if (movelist.Effect_Entries != null && movelist.Effect_Entries.Any())
                    {
                        <MudSimpleTable Style="overflow-x: auto; border-radius: 15px;" Class="pa-4 red-text text-accent-4 justify-content-center">
                            @foreach (var effect in movelist.Effect_Entries)
                            {
                                <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled">@effect.Effect</MudChip>
                            }

                            @foreach (var effect in movelist.Effect_Entries)
                            {
                                <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled">@effect.ShortEffect</MudChip>
                            }
                        </MudSimpleTable>
                    }
                    else
                    {
                        <MudText Typo="Typo.subtitle1" Color="Color.Warning">No hay efectos disponibles para este movimiento.</MudText>
                    }
                </MudChipSet>
            </MudCardContent>
        </MudCard>
    }
    else if (errorMessage != null)
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
</MudContainer>

@code {
    private string? errorMessage;
    private bool _processing = false;
    private static Movelist? movelist;
    private string pokemonMove = string.Empty;
    private bool enabledvar = false;
    private bool Dissearch = false;
    private bool Disclear = true;
    private string iconchange = @Icons.Material.Filled.Cancel;
    private string clase = "invisible";
    private string progressvisibilty = "invisible";


    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Reinicia las variables
        pokemonMove = string.Empty;
        movelist = null;
        errorMessage = null;
        enabledvar = false;
        Dissearch = false;
        Disclear = true;
        clase = "invisible";
        progressvisibilty = "invisible";
    }


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(SharedMoveService.SelectedMove))
        {
            pokemonMove = SharedMoveService.SelectedMove;
            await FetchMoves();
        }
    }

    private async Task<IEnumerable<string>> SearchMoves(string value, CancellationToken cancellationToken)
    {
        // Llama al método en PokeApiService para obtener los nombres de movimientos
        var allMoves = await PokeApiService.GetAllMovesAsync();
        if (string.IsNullOrWhiteSpace(value))
            return allMoves;

        return allMoves.Where(move => move.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task FetchMoves()
    {
        try
        {
            errorMessage = null;
            movelist = await PokeApiService.GetMovesAsync(pokemonMove.ToLower());
            if (movelist != null)
            {
                enabledvar = true;
                Dissearch = true;
                Disclear = false;
                clase = "mt-2 ml-2";
            }
            else
            {
                errorMessage = "No se pudo encontrar el Movimiento. Verifica el nombre ingresado.";
            }
        }
        catch (Exception ex)
        {
            movelist = null;
            errorMessage = $"Error al buscar el Movimiento: {ex.Message}";
        }
    }

    private async Task SearchByButton()
    {
        if (!string.IsNullOrWhiteSpace(pokemonMove))
        {
            await FetchMoves();
        }
        else
        {
            errorMessage = $"Error al buscar el Movimiento: No se insertó ningún nombre o ID";
        }
    }

    private async void ClearFields()
    {
        pokemonMove = string.Empty;
        movelist = null;
        errorMessage = null;
        enabledvar = false;
        Dissearch = false;
        Disclear = true;
        clase = "invisible";
        progressvisibilty = "invisible";
    }

    public void Dispose()
{
    // Reinicia valores al salir del componente
    pokemonMove = string.Empty;
    movelist = null;
    errorMessage = null;
    enabledvar = false;
    Dissearch = false;
    Disclear = true;
    clase = "invisible";
    progressvisibilty = "invisible";

}

}
