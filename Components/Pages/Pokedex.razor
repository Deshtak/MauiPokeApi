@page "/"
@using static PokeApiService
@inject PokeApiService PokeApiService
@inject NavigationManager NavigationManager
@inject SharedPokemonService SharedPokemonService
@inject SharedMoveService SharedMoveService






<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex justify-content-center">
    
    <MudImage Class="d-flex justify-center rounded-lg" ObjectFit="ObjectFit.Fill" Height="200" Width="400" Src="https://static.vecteezy.com/system/resources/previews/027/127/571/non_2x/pokemon-logo-pokemon-icon-transparent-free-png.png" Alt="Örebro Slott" Elevation="25" />

</MudContainer>


<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" Class="red Default white-text shades-text text-center mb-4 rounded-lg" >Pokédex</MudText>
    <MudAutocomplete T="string"
                     @bind-Value="pokemonName"
                     Label="Buscar Pokémon"
                     Variant="Variant.Outlined"
                     Color="Color.Primary"
                     Adornment="Adornment.End"
                     AdornmentIcon="@Icons.Material.Filled.Search"
                     AdornmentColor="Color.Secondary"
                     SearchFunc="SearchPokemonAsync"
                     OnItemSelected="OnPokemonSelected" />


    <MudButton OnClick="SearchByButton" Color="Color.Primary" Class="mt-2 ml-2">Buscar</MudButton>
    <MudButton OnClick="ClearFields" Color="Color.Primary" Class="mt-2 ml-2">
        @if (_processing)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Procesando</MudText>
        }
        else
        {
            <MudText Class="mt-2 ml-2" Color="Color.Default">Limpiar</MudText>
        }
    </MudButton>

    @if (pokemon != null)
    {
        <MudCard Class="mt-4" Style="background-color: #FFFFFF; border: 2px solid #FF0000; border-radius: 16px;">
            <MudCard>
                <img src="@pokemonImage" alt="@pokemon.Name" style="max-height: 300px; object-fit: contain;" />
            </MudCard>
            <MudCardContent>
                <MudText Align="Align.Center" Typo="Typo.h5" Color="Color.Primary">@pokemon.Name.ToUpper()</MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" Color="Color.Primary">ID: @pokemon.Id</MudText>
                <MudText Align="Align.Center" Typo="Typo.body1" Color="Color.Primary" Class="mt-2">Tipo:</MudText>
                <MudChipSet Style="display: flex; justify-content: center;" T="string">
                    @foreach (var type in pokemon.Types)
                    {
                        <MudChip Align="Align.Center" T="string" Color="Color.Warning" Variant="Variant.Filled">@type.Type.Name.ToUpper()</MudChip>
                    }
                </MudChipSet>
                <MudText Align="Align.Center" Typo="Typo.body1" Class="pa-4 red shades-text text-white" Style="border-radius: 15px;">Habilidades:</MudText>
                <MudChipSet Style="display: flex; justify-content: center;" T="string">
                    @foreach (var ability in pokemon.Abilities)
                    {
                        <MudChip T="string" Color="Color.Info" Variant="Variant.Filled">@ability.Ability.Name.ToUpper()</MudChip>
                    }
                </MudChipSet>
                <MudText Align="Align.Center" Typo="Typo.body1" Class="pa-4 red shades-text text-white" Style="border-radius: 15px;">Movimientos:</MudText>
                <MudDivider/>
                <MudBreakpointProvider Class="mt-4" Style="background-color: ##8D06B2; border: 2px solid #FF0000; border-radius: 16px;">
                        @foreach (var move in pokemon.Moves)
                        {
                        <MudHidden>
                            <MudButton Class="pa-4 blue text-white" Style="border-radius: 15px;" OnClick="() => SelectMove(move.Move.Name)">@move.Move.Name.ToUpper()</MudButton>
                        </MudHidden>
                        }
                </MudBreakpointProvider>
                
            </MudCardContent>
        </MudCard>
    }
    else if (errorMessage != null)
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
</MudContainer>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? QueryPokemonName { get; set; }
    private string pokemonName = string.Empty;
    private static Pokemon? pokemon;
    private static string? pokemonImage;
    private string? errorMessage;
    private bool _processing = false;

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if(pokemonName != string.Empty)
        {
            if (e.Key == "Enter")
            {
                await FetchPokemon();
            }
        }
        else
        {
            if (e.Key == "Enter")
            {
                errorMessage = $"Error al buscar el Pokémon: No se inserto ningun nombre";
            }

        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(QueryPokemonName))
        {
            pokemonName = QueryPokemonName;
            await FetchPokemon();
        }
    }

    private async Task SearchByButton()
    {
        if (pokemonName != string.Empty)
        {
            await FetchPokemon();
        }
        else
        {
            errorMessage = $"Error al buscar el Pokémon: No se inserto ningun nombre";
        }
    }

    private async Task FetchPokemon()
    {
        try
        {
            errorMessage = null;
            pokemon = await PokeApiService.GetPokemonAsync(pokemonName.ToLower());

            if (pokemon != null)
            {
                pokemonImage = $"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/{pokemon.Id}.png";
            }
            else
            {
                errorMessage = "No se pudo encontrar el Pokémon. Verifica el nombre ingresado.";
            }
        }
        catch (Exception ex)
        {
            pokemon = null;
            pokemonImage = null;
            errorMessage = $"Error al buscar el Pokémon: {ex.Message}";
        }
    }

    protected override void OnInitialized()
    {
        // Suscribirse al evento cuando el componente se inicializa.
        SharedPokemonService.OnPokemonSelected += OnPokemonSelected;
    }

    private void SelectMove(string pokemonMove)
    {
        SharedMoveService.SetSelectedMove(pokemonMove);
        NavigationManager.NavigateTo("/attacks");
    }
    private void NavigateToPokedex(string pokemonMove)
    {
        NavigationManager.NavigateTo($"/?pokemonMove={pokemonMove}");
    }


    private async Task<IEnumerable<string>> SearchPokemonAsync(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return Array.Empty<string>();
        }

        try
        {
            var pokemonList = await PokeApiService.GetPokeListAsync(); // Obtiene la lista de Pokémon.
            return pokemonList
                .Where(p => p.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
                .Select(p => p.Name); // Filtra los nombres que coincidan.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al buscar Pokémon: {ex.Message}");
            return Array.Empty<string>();
        }
    }


    private async Task OnPokemonSelected(string selectedPokemon)
    {
        pokemonName = selectedPokemon;
        await FetchPokemon(); // Llama a tu método existente para buscar el Pokémon.
    }


    private async void OnPokemonSelected()
    {
        if (!string.IsNullOrEmpty(SharedPokemonService.SelectedPokemon))
        {
            pokemonName = SharedPokemonService.SelectedPokemon;
            await FetchPokemon();
        }
    }

    public void Dispose()
    {
        // Desuscribirse del evento para evitar memory leaks.
        SharedPokemonService.OnPokemonSelected -= OnPokemonSelected;
    }

    Color Color = Color.Success;
    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top * -1) switch
        {
            var x when x < 500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _ => Color.Error
        };
    }

    private async void ClearFields()
    {
        if(pokemonName!=string.Empty)
        {
            _processing = true;
            await Task.Delay(800);
            pokemonName = string.Empty;
            Console.WriteLine(pokemonName);
            pokemon = null;
            Console.WriteLine(pokemon);
            pokemonImage = null;
            Console.WriteLine(pokemonImage);
            errorMessage = null;
            _processing = false;
            StateHasChanged();
        }
        else
        {
            errorMessage = "El campo esta vacio, no hay nada que borrar";
        }

    }

}