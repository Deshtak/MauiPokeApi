@page "/evochain"
@using static PokeApiService
@inject PokeApiService PokeApiService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudText Typo="Typo.h4" Class="text-center mb-4" Color="Color.Primary">Cadena Evolutiva</MudText>

    <MudSelect T="ListaInfo" @bind-Value="selectedPokemon" Label="Selecciona un Pokémon">
        @if (pokemonList != null)
        {
            @foreach (var pokemon in pokemonList)
            {
                <MudSelectItem T="ListaInfo" Value="@pokemon">@pokemon.Name</MudSelectItem>
            }
        }
    </MudSelect>

    <MudButton Variant="Variant.Filled" OnClick="FetchEvolutionChain" Disabled="selectedPokemon == null">
        Ver Cadena Evolutiva
    </MudButton>

    <MudDivider Class="my-4" />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudText Typo="Typo.body1" Color="Color.Error">@errorMessage</MudText>
    }
    else if (evolutionChain != null)
    {
        <MudGrid>
            @foreach (var evo in evolutionChain)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudPaper Class="p-4 text-center">
                        @if (pokemonData.ContainsKey(evo))
                        {
                            <MudImage Src="@GetPokemonImageUrl(pokemonData[evo].Id)" Alt="@evo" Width="150" Height="150" Class="mb-2" />
                            <MudText Typo="Typo.h6">@evo.ToUpper()</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1" Color="Color.Info">Cargando datos...</MudText>
                        }
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private List<ListaInfo>? pokemonList;
    private ListaInfo? selectedPokemon;
    private List<string>? evolutionChain;
    private string errorMessage = "";
    private Dictionary<string, Pokemon> pokemonData = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pokemonList = await PokeApiService.GetPokeListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar la lista de Pokémon: {ex.Message}";
        }
    }

    private async Task FetchEvolutionChain()
    {
        if (selectedPokemon == null) return;

        try
        {
            errorMessage = "";
            evolutionChain = null;
            pokemonData.Clear();
            var chainUrl = await PokeApiService.GetEvolutionChainUrlAsync(selectedPokemon.Name);

            if (string.IsNullOrEmpty(chainUrl))
            {
                errorMessage = "No se encontró URL de cadena evolutiva.";
                return;
            }

            evolutionChain = await PokeApiService.GetEvolutionChainAsync(chainUrl);

            if (evolutionChain == null || !evolutionChain.Any())
            {
                errorMessage = "No se encontró cadena evolutiva para este Pokémon.";
            }
            foreach (var pokemonName in evolutionChain)
            {
                if (!pokemonData.ContainsKey(pokemonName))
                {
                    var pokemon = await PokeApiService.GetPokemonAsync(pokemonName);
                    if (pokemon != null)
                    {
                        pokemonData[pokemonName] = pokemon;
                    }
                }
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Error al obtener la cadena evolutiva: {ex.Message}";
        }
    }
    private string GetPokemonImageUrl(int id)
    {
        // Las imágenes usan el ID del Pokémon directamente desde la API
        return $"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/{id}.png";
    }
}
