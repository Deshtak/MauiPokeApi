@page "/evochain"
@inject PokeApiService PokeApiService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudText Typo="Typo.h4" Class="text-center mb-4" Color="Color.Primary">Cadena Evolutiva</MudText>

    <MudSelect T="ListaInfo" @bind-Value="selectedPokemon" Label="Selecciona un Pokémon">
        @if (pokemonList != null)
        {
            @foreach (var pokemon in pokemonList)
            {
                <MudSelectItem T="ListaInfo" Value="@pokemon">@pokemon.Name</MudSelectItem>
            }
        }
    </MudSelect>

    <MudButton Variant="Variant.Filled" OnClick="FetchEvolutionChain" Disabled="selectedPokemon == null">
        Ver Cadena Evolutiva
    </MudButton>

    <MudDivider Class="my-4" />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudText Typo="Typo.body1" Color="Color.Error">@errorMessage</MudText>
    }
    else if (evolutionChain != null)
    {
        <MudList T="string">
            @foreach (var evo in evolutionChain)
            {
                <MudListItem>
                    <MudText Typo="Typo.body1">@evo</MudText>
                </MudListItem>
            }
        </MudList>
    }
</MudContainer>

@code {
    private List<ListaInfo>? pokemonList;
    private ListaInfo? selectedPokemon;
    private List<string>? evolutionChain;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pokemonList = await PokeApiService.GetPokeListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar la lista de Pokémon: {ex.Message}";
        }
    }

    private async Task FetchEvolutionChain()
    {
        if (selectedPokemon == null) return;

        try
        {
            errorMessage = "";
            var id = GetPokemonId(selectedPokemon.Url);
            evolutionChain = await PokeApiService.GetEvolutionChainAsync(id);

            if (evolutionChain == null || !evolutionChain.Any())
            {
                errorMessage = "No se encontró cadena evolutiva para este Pokémon.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al obtener la cadena evolutiva: {ex.Message}";
        }
    }

    private string GetPokemonId(string pokemonUrl)
    {
        return pokemonUrl.TrimEnd('/').Split('/').Last();
    }
}
